// Code generated by protoc-gen-go.
// source: game.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	game.proto
	gate.proto

It has these top-level messages:
	HelloRequest
	HelloResponse
	TellRequest
	TellRsp
	LoginRequest
	LoginRsp
	RawMsg
	PushMsg
	HeartBeatMsg
	KickAgentReq
	PushClientReq
	BroadcastClientReq
	Rsp
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HelloRequest struct {
	Request string `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
}

func (m *HelloRequest) Reset()                    { *m = HelloRequest{} }
func (m *HelloRequest) String() string            { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()               {}
func (*HelloRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *HelloRequest) GetRequest() string {
	if m != nil {
		return m.Request
	}
	return ""
}

type HelloResponse struct {
	Response string `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
}

func (m *HelloResponse) Reset()                    { *m = HelloResponse{} }
func (m *HelloResponse) String() string            { return proto.CompactTextString(m) }
func (*HelloResponse) ProtoMessage()               {}
func (*HelloResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HelloResponse) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

type TellRequest struct {
	Request  string `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
	TargetId int64  `protobuf:"varint,2,opt,name=targetId" json:"targetId,omitempty"`
}

func (m *TellRequest) Reset()                    { *m = TellRequest{} }
func (m *TellRequest) String() string            { return proto.CompactTextString(m) }
func (*TellRequest) ProtoMessage()               {}
func (*TellRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TellRequest) GetRequest() string {
	if m != nil {
		return m.Request
	}
	return ""
}

func (m *TellRequest) GetTargetId() int64 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

type TellRsp struct {
	Request  string `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
	TargetId int64  `protobuf:"varint,2,opt,name=targetId" json:"targetId,omitempty"`
}

func (m *TellRsp) Reset()                    { *m = TellRsp{} }
func (m *TellRsp) String() string            { return proto.CompactTextString(m) }
func (*TellRsp) ProtoMessage()               {}
func (*TellRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TellRsp) GetRequest() string {
	if m != nil {
		return m.Request
	}
	return ""
}

func (m *TellRsp) GetTargetId() int64 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

func init() {
	proto.RegisterType((*HelloRequest)(nil), "pb.HelloRequest")
	proto.RegisterType((*HelloResponse)(nil), "pb.HelloResponse")
	proto.RegisterType((*TellRequest)(nil), "pb.TellRequest")
	proto.RegisterType((*TellRsp)(nil), "pb.TellRsp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GameService service

type GameServiceClient interface {
	// test push
	Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	// test push all
	HelloWorld(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	// test push one by id
	TellYou(ctx context.Context, in *TellRequest, opts ...grpc.CallOption) (*TellRsp, error)
}

type gameServiceClient struct {
	cc *grpc.ClientConn
}

func NewGameServiceClient(cc *grpc.ClientConn) GameServiceClient {
	return &gameServiceClient{cc}
}

func (c *gameServiceClient) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := grpc.Invoke(ctx, "/pb.GameService/Hello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) HelloWorld(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := grpc.Invoke(ctx, "/pb.GameService/HelloWorld", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) TellYou(ctx context.Context, in *TellRequest, opts ...grpc.CallOption) (*TellRsp, error) {
	out := new(TellRsp)
	err := grpc.Invoke(ctx, "/pb.GameService/TellYou", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GameService service

type GameServiceServer interface {
	// test push
	Hello(context.Context, *HelloRequest) (*HelloResponse, error)
	// test push all
	HelloWorld(context.Context, *HelloRequest) (*HelloResponse, error)
	// test push one by id
	TellYou(context.Context, *TellRequest) (*TellRsp, error)
}

func RegisterGameServiceServer(s *grpc.Server, srv GameServiceServer) {
	s.RegisterService(&_GameService_serviceDesc, srv)
}

func _GameService_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameService/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).Hello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_HelloWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).HelloWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameService/HelloWorld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).HelloWorld(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_TellYou_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).TellYou(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameService/TellYou",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).TellYou(ctx, req.(*TellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GameService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.GameService",
	HandlerType: (*GameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _GameService_Hello_Handler,
		},
		{
			MethodName: "HelloWorld",
			Handler:    _GameService_HelloWorld_Handler,
		},
		{
			MethodName: "TellYou",
			Handler:    _GameService_TellYou_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "game.proto",
}

func init() { proto.RegisterFile("game.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 211 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0x4f, 0xcc, 0x4d,
	0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0xd2, 0xe0, 0xe2, 0xf1, 0x48,
	0xcd, 0xc9, 0xc9, 0x0f, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x92, 0xe0, 0x62, 0x2f, 0x82,
	0x30, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x60, 0x5c, 0x25, 0x6d, 0x2e, 0x5e, 0xa8, 0xca,
	0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x29, 0x2e, 0x8e, 0x22, 0x28, 0x1b, 0xaa, 0x16, 0xce,
	0x57, 0x72, 0xe6, 0xe2, 0x0e, 0x49, 0xcd, 0xc9, 0x21, 0x68, 0x2a, 0xc8, 0x90, 0x92, 0xc4, 0xa2,
	0xf4, 0xd4, 0x12, 0xcf, 0x14, 0x09, 0x26, 0x05, 0x46, 0x0d, 0xe6, 0x20, 0x38, 0x5f, 0xc9, 0x9e,
	0x8b, 0x1d, 0x6c, 0x48, 0x71, 0x01, 0x79, 0x06, 0x18, 0xcd, 0x65, 0xe4, 0xe2, 0x76, 0x4f, 0xcc,
	0x4d, 0x0d, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x15, 0xd2, 0xe3, 0x62, 0x05, 0x7b, 0x41, 0x48,
	0x40, 0xaf, 0x20, 0x49, 0x0f, 0xd9, 0xdf, 0x52, 0x82, 0x48, 0x22, 0x50, 0x3f, 0x30, 0x08, 0x19,
	0x73, 0x71, 0x81, 0x85, 0xc2, 0xf3, 0x8b, 0x72, 0x52, 0x88, 0xd5, 0xa4, 0x09, 0x71, 0x75, 0x64,
	0x7e, 0xa9, 0x10, 0x3f, 0x48, 0x1e, 0x29, 0x1c, 0xa4, 0xb8, 0xe1, 0x02, 0xc5, 0x05, 0x4a, 0x0c,
	0x49, 0x6c, 0xe0, 0x78, 0x30, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x01, 0xd8, 0xcd, 0x95,
	0x01, 0x00, 0x00,
}
